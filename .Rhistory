hatG <- sapply(pmin(data1$Tt, jumptime), Shat.function)
wei <- delta_t/hatG
family <- binomial(link)
fit <- mod.glm.fit( X,res,family=family,weights=wei)
eta <- coef(fit)
data1 <- data1
formula1 <- formula
X <- X
r <- foreach(1:R, .combine=rbind,.export=c("iii","mod.glm.fit")) %dopar% {
iboot <- sample(1:nrow(data1), replace=TRUE)
iii <- rbind(iii, iboot)
boot.data <- data1[iboot, ]
result <- mod.glm.fit(X[iboot,],res[iboot],family=family,weights=wei[iboot])
coefficients(result)
}
boot.eta <- r
boot.sd <- apply(boot.eta, 2, sd, na.rm = TRUE)
return(c(eta, boot.sd))
})
eta <- data.frame(do.call("rbind", eta.list))
coef <- eta[ , 1:(length(eta[1, ])/2)]
sd <- eta[ ,(length(eta[1, ])/2+1):(length(eta[1, ]))]
colnames(sd) <- colnames(coef)
CO = list( transition = "12", time = vec.t12, coefficients = coef, SD = sd, LWL = coef - 1.96*sd,UPL=coef+1.96*sd, p.value = 2*pnorm(-abs(as.matrix(coef/sd))))
if(trans == "all"){
co$co12 = CO
}
else {
co <- list("co" = CO, call = match.call(), transition = trans, s = s, t = t, n.misobs = n.misobs)
class(co) = "TPreg"
return(co)
}
}
if(trans == "13" || trans == "all"){
vec.t13 <- data1$Tt
M13 <- max(vec.t13)
vec.t13 <- vec.t13[order(vec.t13[vec.t13 > s])]
vec.t13 <- vec.t13[vec.t13 <= t]
vec.t13 <- vec.t13[seq(1, length(vec.t13), by)]
vec.t13 <- c(vec.t13, t)
vec.t13 <- unique(vec.t13)
L.t13 <- length(vec.t13)
if(vec.t13[L.t13] >= M13) stop(" for the tansition '13' the effects can not be estimated for the given 't', (large 't' returns all responses equal to 1) ")
iii <- NULL
eta.list <- lapply( vec.t13, function(x){
jumptime <- x
res <- (data1$Tt <= jumptime)
delta_t <- ifelse(data1$Tt <= jumptime , data1$delta, 1)
hatG <- sapply(pmin(data1$Tt, jumptime), Shat.function)
wei <- delta_t/hatG
family <- binomial(link)
fit <- mod.glm.fit( X, res, family = family, weights=wei)
eta <- coef(fit)
data1 <- data1
formula1 <- formula
X <- X
r <- foreach(1:R, .combine=rbind, .export = c("iii","mod.glm.fit")) %dopar% {
iboot <- sample(1:nrow(data1), replace=TRUE)
iii <- rbind(iii, iboot)
boot.data <- data1[iboot, ]
result <- mod.glm.fit(X[iboot, ], res[iboot], family = family, weights = wei[iboot])
coefficients(result)
}
boot.eta <- r
boot.sd <- apply(boot.eta, 2, sd, na.rm = TRUE)
return(c(eta, boot.sd))
})
eta <- data.frame(do.call("rbind", eta.list))
coef <- eta[ ,1:(length(eta[1, ])/2)]
sd <- eta[ ,(length(eta[1, ])/2 + 1):(length(eta[1, ]))]
colnames(sd) <- colnames(coef)
CO <- list(transition = "13", time = vec.t13, coefficients = coef, SD = sd, LWL = coef - 1.96*sd, UPL = coef + 1.96*sd, p.value = 2*pnorm(-abs(as.matrix(coef/sd))))
if(trans == "all"){
co$co13 = CO
}
else {
co <- list("co" = CO, call = match.call(), transition = trans, s = s, t = t, n.misobs = n.misobs)
class(co) = "TPreg"
return(co)
}
}
if(trans == "23" || trans == "all"){
vec.t23 <- data2$Tt
M23 <- max(vec.t23)
vec.t23 <- vec.t23[order(vec.t23[vec.t23 > s])]
vec.t23 <- vec.t23[vec.t23 <= t]
vec.t23 <- vec.t23[seq(1, length(vec.t23), by)]
vec.t23 <- c(vec.t23,t)
vec.t23 <- unique(vec.t23)
L.t23 <- length(vec.t23)
if(vec.t23[L.t23] >= M23) stop(" for the tansition '23' the effects can not be estimated for the given 't'(large 't' returns all responses equal to 1)")
iii <- NULL
eta.list <- lapply( vec.t23, function(x){
jumptime <- x
res <-(data2$Tt <= jumptime)
delta_t <- ifelse(data2$Tt <= jumptime, data2$delta, 1)
hatG <- sapply(pmin(data2$Tt, jumptime), Shat.function23)
wei <- delta_t/hatG
family <- binomial(link)
fit <- mod.glm.fit( X2, res, family = family, weights=wei)
eta <- coef(fit)
data2 <- data2
formula1 <- formula
X2 <- X2
r <- foreach(1:R, .combine = rbind, .export=c("iii","mod.glm.fit")) %dopar% {
iboot <- sample(1:nrow(data2), replace=TRUE)
iii <- rbind(iii, iboot)
boot.data <- data2[iboot, ]
result <- mod.glm.fit(X2[iboot, ], res[iboot], family = family, weights = wei[iboot])
coefficients(result)
}
boot.eta <- r
boot.sd <- apply(boot.eta,2, sd, na.rm = TRUE)
return(c(eta, boot.sd))
})
eta <- data.frame(do.call("rbind", eta.list))
coef <- eta[ , 1:(length(eta[1, ])/2)]
sd <- eta[ , (length(eta[1, ])/2 + 1):(length(eta[1, ]))]
colnames(sd) <- colnames(coef)
CO <- list(transition = "23", time = vec.t23, coefficients = coef, SD = sd, LWL = coef - 1.96*sd, UPL = coef + 1.96*sd, p.value = 2*pnorm(-abs(as.matrix(coef/sd))))
if(trans == "all"){
co$co23=CO
}
else {
co <- list("co" = CO, call = match.call(), transition = trans, s = s, t = t, n.misobs=n.misobs)
class(co)="TPreg"
return(co)
}
}
if(trans == "all"){
co$call = match.call()
co$transition = "all"
co$s = s
co$t = t
co$n.misobs = n.misobs
class(co) = "TPreg"
return(co)
}
}
}
print.TPreg <- function(x,...){
if(x$transition == "all"){
cat("Call:\n")
print(x$call)
cat("\nTransitions:\n")
print(c("11", "12", "13", "23"))
cat("\n(s,t):\n")
print(c(x$s, x$t))
t11 <- length(x$co11$time)
coeft <- x$co11$coefficients[t11, ]
sdt <- x$co11$SD[t11, ]
up.l <- as.numeric(coeft + 1.96*sdt)
lw.l <- as.numeric(coeft - 1.96*sdt)
p.v <- x$co11$p.value[t11, ]
TAB11 <- cbind(Estimate = as.numeric(coeft), St.Err = as.numeric(sdt), LW.L = lw.l, UP.L = up.l, p.value = p.v)
rownames(TAB11) <- names(coeft)
colnames(TAB11) <- c("Estimate", "St.Err", "LW.L", "UP.L", "P.value")
cat("\nCoefficients 11:\n")
print(TAB11)
t12 <- length(x$co12$time)
coeft <- x$co12$coefficients[t12, ]
sdt <- x$co12$SD[t12, ]
up.l <- as.numeric(coeft + 1.96*sdt)
lw.l <- as.numeric(coeft - 1.96*sdt)
p.v <- x$co12$p.value[t12, ]
TAB12 <- cbind(Estimate = as.numeric(coeft), St.Err = as.numeric(sdt), LW.L = lw.l, UP.L = up.l, p.value = p.v)
rownames(TAB12) <- names(coeft)
colnames(TAB12) <- c("Estimate", "St.Err", "LW.L", "UP.L", "P.value")
cat("\nCoefficients 12:\n")
print(TAB12)
t13 <- length(x$co13$time)
coeft <- x$co13$coefficients[t13, ]
sdt <- x$co13$SD[t13, ]
up.l <- as.numeric(coeft + 1.96*sdt)
lw.l <- as.numeric(coeft - 1.96*sdt)
p.v <- x$co13$p.value[t13, ]
TAB13 <- cbind(Estimate = as.numeric(coeft), St.Err = as.numeric(sdt), LW.L = lw.l, UP.L = up.l, p.value = p.v)
rownames(TAB13) <- names(coeft)
colnames(TAB13) <- c("Estimate", "St.Err", "LW.L", "UP.L", "P.value")
cat("\nCoefficients 13:\n")
print(TAB13)
t23 <- length(x$co23$time)
coeft <- x$co13$coefficients[t23, ]
sdt <- x$co13$SD[t23, ]
zval <- coeft/sdt
up.l <- as.numeric(coeft + 1.96*sdt)
lw.l <- as.numeric(coeft - 1.96*sdt)
p.v <- x$co23$p.value[t23, ]
NMO <- x$n.misobs
TAB23 <- cbind(Estimate = as.numeric(coeft), St.Err = as.numeric(sdt), LW.L = lw.l, UP.L = up.l, p.value = p.v)
rownames(TAB23) <- names(coeft)
colnames(TAB23) <- c("Estimate", "St.Err", "LW.L", "UP.L", "P.value")
cat("\nCoefficients 23:\n")
print(TAB23)
cat("\n\n")
print(paste(NMO, "observations deleted due to missingness from 'data'"))
}
else{
t <- length(x$co$time)
coeft <- x$co$coefficients[t, ]
sdt <- x$co$SD[t, ]
zval <- coeft/sdt
up.l <- as.numeric(coeft + 1.96*sdt)
lw.l <- as.numeric(coeft - 1.96*sdt)
p.v <- x$co$p.value[t, ]
NMO <- x$n.misobs
TAB <- cbind(Estimate = as.numeric(coeft), St.Err = as.numeric(sdt), LW.L = lw.l, UP.L = up.l, p.value = p.v)
rownames(TAB) <- names(coeft)
colnames(TAB) <- c("Estimate", "St.Err", "LW.L", "UP.L", "P.value")
cat("Call:\n")
print(x$call)
cat("\nTransition:\n")
print(x$transition)
cat("\n(s,t):\n")
print(c(x$s, x$t))
cat("\nCoefficients:\n")
print(TAB)
cat("\n\n")
print(paste(NMO, "observations deleted due to missingness from 'data'"))
}
}
summary.TPreg <- function(object,...){
cat("Call:\n")
print(object$call)
if (object$transition == "all") {
nlist <- 4
nam <- c("11", "12", "13", "23")
cat("Transitions:\n")
print(nam)
}
else {
nam <- object$transition
nlist <- 1
}
cat("(s,t):\n")
print(c(object$s, object$t))
for (i in 1:nlist){
ilist <- object[[i]]
cat("\n",paste("Transition ", nam[i], sep=""), " :\n")
cat("\n     Coefficients:\n")
print(cbind(time = ilist$time, ilist$coefficients))
cat("\n     Standard Errors:\n")
print(cbind(time = ilist$time, ilist$SD))
cat("\n     Lower limit:\n")
print(cbind(time = ilist$time, ilist$LWL))
cat("\n     Upper limit:\n")
print(cbind(time = ilist$time, ilist$UPL))
cat("\n     p.value:\n")
print(data.frame(cbind(time = ilist$time, ilist$p.value)))
cat("\n\n")
}
W.n.misobs <- paste( object$n.misobs, "observation(s) deleted due to missingness from 'data'")
print(W.n.misobs)
}
plot.TPreg <- function(x, covar, rug=TRUE,  main, ylab, xlab, Ylim,  ...)
{
if (missing(xlab)) xlab="time"
if (x$transition=="all") {
nfun <- 4
nam.p <- c("11", "12", "13", "23")
}
else {
nfun <- 1
nam.p <- x$transition
}
if (missing(covar)) covar <- colnames(x[[1]]$coefficients)[-1]
if (!is.character(covar)) stop(" 'covar' must be a single character string referring the name of a covariable")
ncovar <- length(covar)
n.plots <- nfun*ncovar
mar0=c(4,3.9,4,3.9)
if (n.plots == 0)
stop("No terms to plot - nothing for plot.TPreg() to do.")
ppp <- n.plots
c <- r <- trunc(sqrt(ppp))
if (c < 1)       r <- c <- 1
if (c * r < ppp) c <- c + 1
if (c * r < ppp) r <- r + 1
oldpar <- par(mfrow = c(r, c), mar = mar0)
mis.lab <- missing(ylab)
mis.main <- missing(main)
mis.Ylim <- missing(Ylim)
for (i.fun in 1:nfun){
for (i.covar in 1:ncovar){
if (mis.Ylim) {ylim = NULL
}
else {ylim = Ylim[[i.covar]]
}
col <- covar[i.covar]
time11 <- x[[i.fun]]$time
i.co <- x[[i.fun]]
co11 <- i.co$coeff
if (mis.lab) ylab <- paste("effect", "of", col)
if (mis.main) main <- paste("TP:", nam.p[i.fun] )
plot(time11, co11[ , col], type = "s", xlab = xlab, ylab = ylab, main = main, ylim = ylim, ...)
lines(time11, i.co$LWL[,col], type = "s", col = "lightseagreen")
lines(time11, i.co$UPL[,col], type = "s", col = "lightseagreen")
lines(time11, rep(0,length(time11)), col = "red", lty = 2)
if (rug) rug(as.numeric(time11 ), ...)
}
}
}
data(colon, package = "survival")
colonTPreg <- data.frame(id=colon$id[seq(1,length(rownames(colon)),2)], Zt=pmin(colon$time[colon$etype==1],colon$time[colon$etype==2]), Tt=colon$time[colon$etype==2],delta1=pmax(colon$status[colon$etype==1], colon$status[colon$etype==2]), delta=colon$status[colon$etype==2], Nodes=colon$nodes[seq(1,length(rownames(colon)),2)], Age=colon$age[seq(1, length(rownames(colon)),2)],treatment=colon$rx[seq(1, length(rownames(colon)),2)])
data(colonTPreg)
ncores <- detectCores(all.tests = FALSE, logical = TRUE)
ncores
proctime()[3]
proc.time()[3]
data(colonTPreg)
ncores <- detectCores(all.tests = FALSE, logical = TRUE)
a <- proc.time()[3]
co11 <- TPreg( ~ Age + Nodes + treatment, colonTPreg, link = "logit", s = 20, R = 99, t = 200,
trans = "11",  ncores = ncores )
co11
b = proc.time()[3]-a
b
summary(co11)
b
a <- proc.time()[3]
co11 <- TPreg( ~ Age + Nodes + treatment, colonTPreg, link = "logit", s = 20, R = 99, t = 200,
trans = "11",  ncores = ncores )
co11
b = proc.time()[3]-a
b
a <- proc.time()[3]
co11 <- TPreg( ~ Age + Nodes + treatment, colonTPreg, link = "logit", s = 20, R = 99, t = 200,
trans = "11",  ncores = ncores )
co11
b = proc.time()[3]-a
b
a <- proc.time()[3]
co11 <- TPreg( ~ Age + Nodes + treatment, colonTPreg, link = "logit", s = 20, R = 99, t = 200,
trans = "11",  ncores = ncores )
co11
b = proc.time()[3]-a
b
ncores = 1
a <- proc.time()[3]
co11 <- TPreg( ~ Age + Nodes + treatment, colonTPreg, link = "logit", s = 20, R = 99, t = 200,
trans = "11",  ncores = ncores )
co11
b = proc.time()[3]-a
b
ncores = 1
a <- proc.time()[3]
co11 <- TPreg( ~ Age + Nodes + treatment, colonTPreg, link = "logit", s = 20, R = 99, t = 200,
trans = "11",  ncores = ncores )
co11
b = proc.time()[3]-a
b
a <- proc.time()[3]
co11 <- TPreg( ~ Age + Nodes + treatment, colonTPreg, link = "logit", s = 20, R = 199, t = 200,
trans = "11",  ncores = ncores )
co11
b = proc.time()[3]-a
b
a <- proc.time()[3]
co11 <- TPreg( ~ Age + Nodes + treatment, colonTPreg, link = "logit", s = 20, R = 199, t = 200,
trans = "11",  ncores = ncores )
co11
b = proc.time()[3]-a
b
ncores = 7
a <- proc.time()[3]
co11 <- TPreg( ~ Age + Nodes + treatment, colonTPreg, link = "logit", s = 20, R = 199, t = 200,
trans = "11",  ncores = ncores )
co11
b = proc.time()[3]-a
b
ncores = 7
a <- proc.time()[3]
co11 <- TPreg( ~ Age + Nodes + treatment, colonTPreg, link = "logit", s = 20, R = 199, t = 200,
trans = "11",  ncores = ncores )
co11
b = proc.time()[3]-a
b
data(colonTPreg)
ncores <- detectCores(all.tests = FALSE, logical = TRUE)
ncores = 7
a <- proc.time()[3]
co11 <- TPreg( ~ Age + Nodes + treatment, colonTPreg, link = "logit", s = 20, R = 199, t = 200,
trans = "11",  ncores = ncores )
co11
b = proc.time()[3]-a
b
data(colonTPreg)
ncores <- detectCores(all.tests = FALSE, logical = TRUE)
ncores = 8
a <- proc.time()[3]
co11 <- TPreg( ~ Age + Nodes + treatment, colonTPreg, link = "logit", s = 20, R = 199, t = 200,
trans = "11",  ncores = ncores )
co11
b = proc.time()[3]-a
bç
b
data(colonTPreg)
ncores <- detectCores(all.tests = FALSE, logical = TRUE)
ncores = 8
a <- proc.time()[3]
co11 <- TPreg( ~ Age + Nodes + treatment, colonTPreg, link = "logit", s = 20, R = 199, t = 200,
trans = "11",  ncores = ncores )
co11
b = proc.time()[3]-a
b
data(colonTPreg)
ncores <- detectCores(all.tests = FALSE, logical = TRUE)
ncores = 8
a <- proc.time()[3]
co11 <- TPreg( ~ Age + Nodes + treatment, colonTPreg, link = "logit", s = 20, R = 199, t = 200,
trans = "11",  ncores = ncores )
co11
b = proc.time()[3]-a
b
data(colonTPreg)
ncores <- detectCores(all.tests = FALSE, logical = TRUE)
ncores = 8
a <- proc.time()[3]
co11 <- TPreg( ~ Age + Nodes + treatment, colonTPreg, link = "logit", s = 20, R = 199, t = 200,
trans = "11",  ncores = ncores )
co11
b = proc.time()[3]-a
b
ncores = 8
b<-numeric(10)
for (i in 1:b){
a <- proc.time()[3]
co11 <- TPreg( ~ Age + Nodes + treatment, colonTPreg, link = "logit", s = 20, R = 199, t = 200,
trans = "11",  ncores = ncores )
co11
b[i] = proc.time()[3]-a
}
mean(b);sd(b)
nr <- 10
b<-numeric(nr)
for (i in 1:nr){
a <- proc.time()[3]
co11 <- TPreg( ~ Age + Nodes + treatment, colonTPreg, link = "logit", s = 20, R = 199, t = 200,
trans = "11",  ncores = ncores )
co11
b[i] = proc.time()[3]-a
}
data(colonTPreg)
ncores <- detectCores(all.tests = FALSE, logical = TRUE)
ncores = 8
nr <- 10
b<-numeric(nr)
for (i in 1:nr){
a <- proc.time()[3]
co11 <- TPreg( ~ Age + Nodes + treatment, colonTPreg, link = "logit", s = 20, R = 199, t = 200,
trans = "11",  ncores = ncores )
co11
b[i] = proc.time()[3]-a
}
mean(b);sd(b)
stopCluster()
data(colonTPreg)
ncores <- detectCores(all.tests = FALSE, logical = TRUE)
ncores = 8
nr <- 10
b<-numeric(nr)
for (i in 1:nr){
a <- proc.time()[3]
co11 <- TPreg( ~ Age + Nodes + treatment, colonTPreg, link = "logit", s = 20, R = 199, t = 200,
trans = "11",  ncores = ncores )
co11
b[i] = proc.time()[3]-a
}
mean(b);sd(b)
stopImplicitCluster()
data(colonTPreg)
ncores <- detectCores(all.tests = FALSE, logical = TRUE)
ncores = 8
nr <- 10
b<-numeric(nr)
for (i in 1:nr){
a <- proc.time()[3]
co11 <- TPreg( ~ Age + Nodes + treatment, colonTPreg, link = "logit", s = 20, R = 199, t = 200,
trans = "11",  ncores = ncores )
co11
b[i] = proc.time()[3]-a
}
mean(b);sd(b)
?stopCluster
?doParallel
cl <- makePSOCKcluster(2)
registerDoParallel(cl)
m <- matrix(rnorm(9), 3, 3)
foreach(i=1:nrow(m), .combine=rbind)
stopCluster(cl)
data(colonTPreg)
ncores <- detectCores(all.tests = FALSE, logical = TRUE)
ncores = 8
nr <- 10
b<-numeric(nr)
a <- proc.time()[3]
co11 <- TPreg( ~ Age + Nodes + treatment, colonTPreg, link = "logit", s = 20, R = 199, t = 200,
trans = "11",  ncores = ncores )
co11
b[i] = proc.time()[3]-a
?snow
library(roxygen2)
setwd("C:/Users/moviedo/github/fda.usc/")
getwd()
pkgbuild::compile_dll()
roxygenize()
devtools::document()
library(roxygen2)
setwd("C:/Users/moviedo/github/fda.usc/")
getwd()
pkgbuild::compile_dll()
roxygenize()
devtools::document()
